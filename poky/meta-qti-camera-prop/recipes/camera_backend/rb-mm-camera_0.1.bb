inherit androidmk qlicense qprebuilt

DESCRIPTION = "MM Camera libraries for MSM/QSD"
SECTION  = "camera"

FILESPATH =+ "${WORKSPACE}:"
SRC_URI   = "file://camera/services/mm-camera-legacy"
#SRC_URI  += "file://0001-Dump-iface-previews.patch"
SRC_URI  += "file://mm-qcamera-daemon.service"

SRC_DIR   = "${WORKSPACE}/camera/services/mm-camera-legacy"

SRCREV = "${AUTOREV}"
S      = "${WORKDIR}/camera/mm-camera-legacy"

def get_depends(bb, d):
    srcdir = d.getVar('SRC_DIR', True)
    if (os.path.isdir(srcdir)):
        return "cameradbg mm-3a-core mm-camerasdk"
    else:
        return "cameradbg mm-3a-core"

def get_product_extras(d):
    if d.getVar('MACHINE', True) == 'apq8096':
        return "FD_USES_DSP=false"
    else:
        return ""

DEPENDS += "glib-2.0"
DEPENDS += "libxml2"
DEPENDS += "adreno200"
DEPENDS += "rb-camera"
#DEPENDS += "mm-camera-noship"
DEPENDS += "fastcv-noship"
#DEPENDS += "${@get_depends(bb, d)}"
DEPENDS += "rb-mm-3a-core"
DEPENDS += "rb-mm-camera-lib"

#Start unpack only after cameradbg packaging finishes
#do_unpack[depends] += "${MLPREFIX}cameradbg:do_packagedata"

EXTRA_OEMAKE += "SRC_CAMERA_HAL_DIR='${TMPDIR}'/work/'${MULTIMACH_TARGET_SYS}'/'${MLPREFIX}'rb-camera/'${EXTENDPE}${PV}-${PR}'/lib-legacy"
EXTRA_OEMAKE += "SRC_XML_INCLUDE='${STAGING_INCDIR}'/libxml2"
EXTRA_OEMAKE += "QC_PROP_ROOT='${WORKSPACE}'/camera/services"
EXTRA_OEMAKE += "${@get_product_extras(d)}"

CFLAGS += "-Wno-error -Wno-uninitialized -Wno-error=attributes -Wno-error=unused-parameter"
CFLAGS += "-Wno-error=builtin-macro-redefined -Wno-error=type-limits"
CFLAGS += "-D__unused="__attribute__((__unused__))""
CFLAGS += "-D_GNU_SOURCE"
CFLAGS += "-DUNIX_PATH_MAX=108"
CFLAGS += "-DIOT_PLATFORM"
CFLAGS += "-D_LE_CAMERA_"

CFLAGS += "-I${STAGING_INCDIR}/adreno/"
CFLAGS += "-I${STAGING_INCDIR}/mm-camera-legacy/"

CFLAGS += "-I${STAGING_INCDIR}/glib-2.0"
CFLAGS += "-I${STAGING_LIBDIR}/glib-2.0/include"

CFLAGS += "-include linux/limits.h"
CFLAGS += "-include stddef.h"
CFLAGS += "-include stdint.h"
CFLAGS += "-Dstrlcpy=g_strlcpy"
CFLAGS += "-Dstrlcat=g_strlcat"
CFLAGS += "-include glib.h"
CFLAGS += "-include glibconfig.h"
CFLAGS += "-include sys/ioctl.h"
CFLAGS += "-include time.h"
CFLAGS += "-include sys/time.h"

LDFLAGS += "-lcutils"
LDFLAGS += "-lglib-2.0"
LDFLAGS += "-llog"
LDFLAGS += "-lrt"
LDFLAGS += "-lxml2"
LDFLAGS += "-lz"
#LDFLAGS += "-lmmcamera_pdaf"
#LDFLAGS += "-lmmcamera_pdafcamif"

do_fixup_before_compile () {
    # Replace all the $(LOCAL_PATH)/../../../hardware/qcom/camera
    find ${S}/ -type f -name "*.mk" -exec sed -i 's/\$.*\/hardware\/qcom\/camera/\$\(SRC_CAMERA_HAL_DIR\)/g' {} +

    # Replace all the hardware/qcom/camera
    find ${S}/ -type f -name "*.mk" -exec sed -i 's/hardware\/qcom\/camera/\$\(SRC_CAMERA_HAL_DIR\)/g' {} +

    # Remove extra .pc generated by do_patch
    rm -rf ${S}/.pc

    rm -rf ${S}/mm-camera2/log_debug/Android.mk

    find -type f -name "*.mk" -exec sed -i -r 's/\$\(\w+\)(\/\.\.)+\/mm-camerasdk/\$\(\MMCAMERA_SDK_PATH\)/g' {} +

    find -type f -name "*.mk" -exec sed -i -r 's/\$\(\w+\)(\/\.\.)+\/mm-camera-lib/\$\(\MMCAMERA_LIB_PATH\)/g' {} +

    find -type f -name "*.mk" -exec sed -i -r 's/\$\(\w+\)(\/\.\.)+\/mm-still/\$\(\MMSTILL_PATH\)/g' {} +

    find -type f -name "*.mk" -exec sed -i -r 's/\$\(\w+\)(\/\.\.)+\/mm-camera-noship/\$\(LOCAL_MMCAMERA_NOSHIP\)/g' {} +

    sed -i '/LOCAL_SRC_FILES += components\/faceproc\/dynamic_work_partition.c/d' ${S}/mm-camera2/media-controller/modules/imglib/Android.mk
    #
    # fix the glob expression which failed to exclude the extra / in the file path
    find ${S}/ -type f -name "*.mk" -exec sed -i 's/sed s:^$(LOCAL_PATH)::g/sed s:^$(LOCAL_PATH)\/::g/g' {} +

}
addtask fixup_before_compile after do_patch before do_configure

export TARGET_LIBRARY_SUPPRESS_LIST="libcamera_client libhardware libsync libui libcamera_metadata libqdMetaData \
        libqservice libbinder libgui libstlport libandroid libxml2 libz"

do_compile () {
    if [ "${MACHINE}" == "apq8009-robot" ]; then
        export ROBOT_TARGET=true
    fi
    # Current support is limited to 32-bit build
    if [ "${MLPREFIX}" == "lib32-" ] || [ "${MLPREFIX}" == "" -a "${TUNE_ARCH}" == "arm" ]; then
        androidmk_setenv
        export IMGLIB_USES_FASTCV=false
        export USE_GYRO=false
        export INC_PERF_API=false
        export USE_FASTCV_OPT=true
        export LE_PREBUILD_LIB=true
        export LIB_PROPRIETARY_DIR=/usr
        export MMCAMERA_SDK_PATH='$(QC_PROP_ROOT)'/mm-camerasdk
        export MMCAMERA_LIB_PATH='$(QC_PROP_ROOT)'/mm-camera-lib-legacy
        export MMSTILL_PATH='$(QC_PROP_ROOT)'/mm-still-legacy
        export LOCAL_MMCAMERA_NOSHIP='$(QC_PROP_ROOT)'/mm-camera-noship
        export FEATURE_SVHDR_EN=true
        export IS_ENABLE=true

        mkdir -p ${TMPDIR}/work-shared/apq8009/android_compat_build_artifacts/target/product/msm8909/obj/SHARED_LIBRARIES/libmmcamera_pdaf_intermediates
        touch ${TMPDIR}/work-shared/apq8009/android_compat_build_artifacts/target/product/msm8909/obj/SHARED_LIBRARIES/libmmcamera_pdaf_intermediates/export_includes
        mkdir -p ${TMPDIR}/work-shared/apq8009/android_compat_build_artifacts/target/product/msm8909/obj/SHARED_LIBRARIES/libmmcamera_pdafcamif_intermediates
        touch ${TMPDIR}/work-shared/apq8009/android_compat_build_artifacts/target/product/msm8909/obj/SHARED_LIBRARIES/libmmcamera_pdafcamif_intermediates/export_includes

        oe_runmake -f ${LA_COMPAT_DIR}/build/core/main.mk BUILD_MODULES_IN_PATHS=${S} \
            all_modules SHOW_COMMANDS=true || die "make failed"
    else
        die "64-bit build not supported"
    fi
}

do_install () {
    androidmk_setenv

    export TARGET_OUT_HEADERS=${D}${includedir}
    export TARGET_OUT_VENDOR_SHARED_LIBRARIES=${D}${libdir}
    export TARGET_OUT_SHARED_LIBRARIES=${D}${libdir}
    export TARGET_OUT_EXECUTABLES=${D}/system/bin
    export TARGET_OUT_ETC=${D}/system/etc
    export TARGET_OUT=${D}/system
    export IMGLIB_USES_FASTCV=false
    export USE_GYRO=false
    export INC_PERF_API=false
    export LE_PREBUILD_LIB=true
    export MMCAMERA_SDK_PATH='$(QC_PROP_ROOT)'/mm-camerasdk
    export MMCAMERA_LIB_PATH='$(QC_PROP_ROOT)'/mm-camera-lib-legacy
    export MMSTILL_PATH='$(QC_PROP_ROOT)'/mm-still-legacy
    export LOCAL_MMCAMERA_NOSHIP='$(QC_PROP_ROOT)'/mm-camera-noship
    export FEATURE_SVHDR_EN=true
    export IS_ENABLE=true
    oe_runmake -f ${LA_COMPAT_DIR}/build/core/main.mk BUILD_MODULES_IN_PATHS=${S} \
        all_modules SHOW_COMMANDS=true USE_INSTALL=true || die "make failed"

   install -d ${D}/lib/firmware
   install -d ${D}/data/misc/camera
   install -d ${TARGET_OUT_ETC}/firmware
   find ${TARGET_OUT_ETC}/firmware -type f -printf "%P\n" | while read file; do ln -s "/system/etc/firmware/$file" "${D}/lib/firmware/$file"; done
   if ${@bb.utils.contains('DISTRO_FEATURES', 'systemd', 'true', 'false', d)}; then
       install -d ${D}${systemd_unitdir}/system/
       install -m 0644 ${WORKDIR}/mm-qcamera-daemon.service -D ${D}${systemd_unitdir}/system/mm-qcamera-daemon.service
       install -d ${D}${systemd_unitdir}/system/multi-user.target.wants/
       install -d ${D}${systemd_unitdir}/system/ffbm.target.wants/
       # enable the service for multi-user.target
       ln -sf ${systemd_unitdir}/system/mm-qcamera-daemon.service \
            ${D}${systemd_unitdir}/system/multi-user.target.wants/mm-qcamera-daemon.service
       # enable the service for ffbm.target
       ln -sf ${systemd_unitdir}/system/mm-qcamera-daemon.service \
            ${D}${systemd_unitdir}/system/ffbm.target.wants/mm-qcamera-daemon.service
   fi
}

PACKAGES = "${PN}"
FILES_${PN} += "/system/* \
               /usr/* \
               /lib/firmware/* \
               /data/* "
FILES_${PN} += "${systemd_unitdir}/system/"

inherit androidmk qlicense qprebuilt androidmk-clang

DESCRIPTION = "MM Camera libraries for MSM/QSD"
SECTION  = "camera"

FILESPATH =+ "${WORKSPACE}:"
SRC_URI   = "file://camera/services/mm-camera"
SRC_URI  += "file://0001-Dump-iface-previews.patch"
SRC_URI  += "file://mm-qcamera-daemon.service"

SRC_DIR   = "${WORKSPACE}/camera/services/mm-camera"

SRCREV = "${AUTOREV}"
S      = "${WORKDIR}/camera/mm-camera"

def get_depends(bb, d):
    srcdir = d.getVar('SRC_DIR', True)
    if (os.path.isdir(srcdir)):
        return "cameradbg mm-3a-core mm-camerasdk"
    else:
        return "cameradbg mm-3a-core"

def get_product_extras(d):
    if d.getVar('MACHINE', True) == 'apq8096':
        return "FD_USES_DSP=false"
    else:
        return ""

def add_sensors_dep(d):
    if d.getVar('MACHINE', True) == 'apq8053':
        return "sensors"
    else:
        return ""

def ld_sensors_lib(d):
    if d.getVar('MACHINE', True) == 'apq8053':
         return "-lsensor1"
    else:
         return ""

DEPENDS += "glib-2.0"
DEPENDS += "libxml2"
DEPENDS += "adreno200"
DEPENDS += "camera"
DEPENDS += "mm-camera-noship"
DEPENDS += "fastcv-noship"
DEPENDS += "${@add_sensors_dep(d)}"
DEPENDS += "${@get_depends(bb, d)}"

#Start unpack only after cameradbg packaging finishes
do_unpack[depends] += "${MLPREFIX}cameradbg:do_packagedata"

EXTRA_OEMAKE += "SRC_CAMERA_HAL_DIR='${TMPDIR}'/work/'${MULTIMACH_TARGET_SYS}'/'${MLPREFIX}'camera/'${EXTENDPE}${PV}-${PR}'/lib"
EXTRA_OEMAKE += "SRC_XML_INCLUDE='${STAGING_INCDIR}'/libxml2"
EXTRA_OEMAKE += "QC_PROP_ROOT='${WORKSPACE}'/camera/services"
EXTRA_OEMAKE += "${@get_product_extras(d)}"

CFLAGS += "-Wno-error -Wno-uninitialized -Wno-error=attributes -Wno-error=unused-parameter"
CFLAGS += "-Wno-error=builtin-macro-redefined -Wno-error=type-limits"
CFLAGS += "-D__unused="__attribute__((__unused__))""
CFLAGS += "-D_GNU_SOURCE"
CFLAGS += "-DUNIX_PATH_MAX=108"
CFLAGS += "-DIOT_PLATFORM"
CFLAGS += "-D_LE_CAMERA_"

CFLAGS += "-I${STAGING_INCDIR}/adreno/"
CFLAGS += "-I${STAGING_INCDIR}/mm-camera/"
CFLAGS += "-I${STAGING_INCDIR}/sensors/"
CFLAGS += "-I${STAGING_INCDIR}/eis_dg/"

CFLAGS += "-I${STAGING_INCDIR}/glib-2.0"
CFLAGS += "-I${STAGING_LIBDIR}/glib-2.0/include"

CFLAGS += "-include linux/limits.h"
CFLAGS += "-include stddef.h"
CFLAGS += "-include stdint.h"
CFLAGS += "-Dstrlcpy=g_strlcpy"
CFLAGS += "-Dstrlcat=g_strlcat"
CFLAGS += "-include glib.h"
CFLAGS += "-include glibconfig.h"
CFLAGS += "-include sys/ioctl.h"
CFLAGS += "-include time.h"
CFLAGS += "-include sys/time.h"

LDFLAGS += "-lcutils"
LDFLAGS += "-lglib-2.0"
LDFLAGS += "-llog"
LDFLAGS += "-lrt"
LDFLAGS += "-lxml2"
LDFLAGS += "-lz"
LDFLAGS += "-lmmcamera_pdaf"
LDFLAGS += "-lmmcamera_pdafcamif"
LDFLAGS += "-lui"
LDFLAGS += "-lutils"
LDFLAGS += "-lEGL_adreno"
LDFLAGS += "-lGLESv2_adreno"
LDFLAGS += "-lGLESv1_CM_adreno"
LDFLAGS += "-lqdMetaData"
LDFLAGS += "-ladsprpc"
LDFLAGS += "${@ld_sensors_lib(d)}"

do_fixup_before_compile () {

    # Replace all the $(LOCAL_PATH)/../../../hardware/qcom/camera
    find ${S}/ -type f -name "*.mk" -exec sed -i 's/\$.*\/hardware\/qcom\/camera/\$\(SRC_CAMERA_HAL_DIR\)/g' {} +

    # Replace all the hardware/qcom/camera
    find ${S}/ -type f -name "*.mk" -exec sed -i 's/hardware\/qcom\/camera/\$\(SRC_CAMERA_HAL_DIR\)/g' {} +

    # Remove extra .pc generated by do_patch
    rm -rf ${S}/.pc

    rm -rf ${S}/mm-camera2/log_debug/Android.mk

    find -type f -name "*.mk" -exec sed -i -r 's/\$\(\w+\)(\/\.\.)+\/mm-camerasdk/\$\(\MMCAMERA_SDK_PATH\)/g' {} +

    find -type f -name "*.mk" -exec sed -i -r 's/\$\(\w+\)(\/\.\.)+\/mm-camera-lib/\$\(\MMCAMERA_LIB_PATH\)/g' {} +

    find -type f -name "*.mk" -exec sed -i -r 's/\$\(\w+\)(\/\.\.)+\/mm-still/\$\(\MMSTILL_PATH\)/g' {} +

    find -type f -name "*.mk" -exec sed -i -r 's/\$\(\w+\)(\/\.\.)+\/mm-camera-noship/\$\(LOCAL_MMCAMERA_NOSHIP\)/g' {} +

    find -type f -name "*.mk" -exec sed -i -r 's/\$\(\w+\)(\/\.\.)+\/qmi\/core/\$\(\QMI_CORE_PATH\)/g' {} +

    sed -i '/LOCAL_SRC_FILES += components\/faceproc\/dynamic_work_partition.c/d' ${S}/mm-camera2/media-controller/modules/imglib/Android.mk
    #
    # fix the glob expression which failed to exclude the extra / in the file path
    find ${S}/ -type f -name "*.mk" -exec sed -i 's/sed s:^$(LOCAL_PATH)::g/sed s:^$(LOCAL_PATH)\/::g/g' {} +
}
addtask fixup_before_compile after do_patch before do_configure

export TARGET_LIBRARY_SUPPRESS_LIST="libcamera_client libhardware libsync libui libcamera_metadata libqdMetaData \
        libqservice libbinder libgui libstlport libandroid libxml2 libz libmmcamera_pdaf libmmcamera_pdafcamif libfastcvopt libEGL libGLESv2 libadsprpc libsensor1"

do_compile () {

    if [ "${PRODUCT}" == "drone" ] && [ "${MACHINE}" == "apq8096" ]; then
        export DRONE_TARGET=true
    fi
    if [ "${MACHINE}" == "apq8053" ]; then
        export USE_GYRO=true
    else
        export USE_GYRO=false
    fi
    # Current support is limited to 32-bit build
    #
    if [ "${MLPREFIX}" == "lib32-" ] || [ "${MLPREFIX}" == "" -a "${TUNE_ARCH}" == "arm" ]; then
        use_clang_android
        androidmk_setenv

        if [ "${MACHINE}" == "apq8053-compact" ]; then
        export SENSOR_SUPPORTED="imx274"
        export ACTUATOR_SUPPORTED="none"
        fi

        export IMGLIB_USES_FASTCV=false
        export INC_PERF_API=false
        export USE_FASTCV_OPT=true
        export LE_PREBUILD_LIB=true
        export LIB_PROPRIETARY_DIR=/usr
        export MMCAMERA_SDK_PATH='$(QC_PROP_ROOT)'/mm-camerasdk
        export MMCAMERA_LIB_PATH='$(QC_PROP_ROOT)'/mm-camera-lib
        export MMSTILL_PATH='$(QC_PROP_ROOT)'/mm-still
        export LOCAL_MMCAMERA_NOSHIP='$(QC_PROP_ROOT)'/mm-camera-noship
        export FEATURE_SVHDR_EN=true
        export IS_ENABLE=true
        export QMI_CORE_PATH='${WORKSPACE}'/qmi/core
        oe_runmake -f ${LA_COMPAT_DIR}/build/core/main.mk BUILD_MODULES_IN_PATHS=${S} \
            all_modules SHOW_COMMANDS=true || die "make failed"
    else
        die "64-bit build not supported"
    fi
}

do_install () {
    androidmk_setenv

    if [ "${MACHINE}" == "apq8053" ]; then
        export USE_GYRO=true
    else
        export USE_GYRO=false
    fi

    if [ "${MACHINE}" == "apq8053-compact" ]; then
        export SENSOR_SUPPORTED="imx274"
        export ACTUATOR_SUPPORTED="none"
    fi

    export TARGET_OUT_HEADERS=${D}${includedir}
    export TARGET_OUT_VENDOR_SHARED_LIBRARIES=${D}${libdir}
    export TARGET_OUT_SHARED_LIBRARIES=${D}${libdir}
    export TARGET_OUT_EXECUTABLES=${D}/system/bin
    export TARGET_OUT_ETC=${D}/system/etc
    export TARGET_OUT=${D}/system
    export IMGLIB_USES_FASTCV=false
    export INC_PERF_API=false
    export LE_PREBUILD_LIB=true
    export MMCAMERA_SDK_PATH='$(QC_PROP_ROOT)'/mm-camerasdk
    export MMCAMERA_LIB_PATH='$(QC_PROP_ROOT)'/mm-camera-lib
    export MMSTILL_PATH='$(QC_PROP_ROOT)'/mm-still
    export LOCAL_MMCAMERA_NOSHIP='$(QC_PROP_ROOT)'/mm-camera-noship
    export FEATURE_SVHDR_EN=true
    export IS_ENABLE=true
    oe_runmake -f ${LA_COMPAT_DIR}/build/core/main.mk BUILD_MODULES_IN_PATHS=${S} \
        all_modules SHOW_COMMANDS=true USE_INSTALL=true || die "make failed"

   install -d ${D}/lib/firmware
   install -d ${D}/data/misc/camera
   install -d ${TARGET_OUT_ETC}/firmware
   find ${TARGET_OUT_ETC}/firmware -type f -printf "%P\n" | while read file; do ln -s "/system/etc/firmware/$file" "${D}/lib/firmware/$file"; done
   if ${@bb.utils.contains('DISTRO_FEATURES', 'systemd', 'true', 'false', d)}; then
       install -d ${D}${systemd_unitdir}/system/
       install -m 0644 ${WORKDIR}/mm-qcamera-daemon.service -D ${D}${systemd_unitdir}/system/mm-qcamera-daemon.service
       install -d ${D}${systemd_unitdir}/system/multi-user.target.wants/
       install -d ${D}${systemd_unitdir}/system/ffbm.target.wants/
       # enable the service for multi-user.target
       ln -sf ${systemd_unitdir}/system/mm-qcamera-daemon.service \
            ${D}${systemd_unitdir}/system/multi-user.target.wants/mm-qcamera-daemon.service
       # enable the service for ffbm.target
       ln -sf ${systemd_unitdir}/system/mm-qcamera-daemon.service \
            ${D}${systemd_unitdir}/system/ffbm.target.wants/mm-qcamera-daemon.service
   fi
}

## This recipe builds many sensors and actuators by default. Among them only one is used
## in device. To avoid rootfs cluttering, package these into seperate packages namely
## ${PN}-essential, ${PN}-optional and install judiciously.

SENSOR_SUPPORTED="imx274 imx477"
ACTUATOR_SUPPORTED="none"

PACKAGES = "${PN}-essential ${PN}-optional ${PN}"

FILES_${PN} = "/system/* \
               /usr/include/* \
               /lib/firmware/* \
               ${libdir}/* \
               /data/* \
               ${systemd_unitdir}/system/ "

def get_essential_libs(bb, d):
    libs_list = ""
    # Add sensor specific chromatix libs.
    for sensor in d.getVar("SENSOR_SUPPORTED", True).split():
        libs_list += "${libdir}/libchromatix_"+sensor+"*.* "
        libs_list += "${libdir}/libmmcamera_"+sensor+"*.* "
        libs_list += "/system/etc/camera/"+sensor+"_chromatix*.xml "

    # Add actuator libs to essential package.
    for actuator in d.getVar("ACTUATOR_SUPPORTED", True).split():
        libs_list += "${libdir}/libactuator_"+actuator+"*.* "

    return libs_list

FILES_${PN}-essential = "${@get_essential_libs(bb, d)}"

# Add remaining chromatix libs to optional package.
FILES_${PN}-optional  = "${libdir}/libchromatix_*.* ${libdir}/libactuator_*.* ${libdir}/libmmcamera_imx*.* ${libdir}/libmmcamera_ov*.* ${libdir}/libmmcamera_s5k*.* /system/etc/camera/*_chromatix*.xml"

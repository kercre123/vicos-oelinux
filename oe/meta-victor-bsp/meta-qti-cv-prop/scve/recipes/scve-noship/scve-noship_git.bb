inherit androidmk qlicense qprebuilt

DESCRIPTION = "Generate scve libraries"
LICENSE = "Qualcomm-Technologies-Inc.-Proprietary"
LIC_FILES_CHKSUM = "file://${COREBASE}/meta-qti-bsp-prop/files/qcom-licenses/\
Qualcomm-Technologies-Inc.-Proprietary;md5=92b1d0ceea78229551577d4284669bb8"

FILESPATH =+ "${WORKSPACE}/cv/:"
SRC_URI = "file://scve-noship/"

SRC_DIR  = "${WORKSPACE}/cv/scve-noship/"
SRCREV = "${AUTOREV}"
S      = "${WORKDIR}/scve-noship"

def get_depends(bb, d):
  srcdir = d.getVar('SRC_DIR', True)
  if (os.path.isdir(srcdir)):
     return "system-core llvm-arm-toolchain-native"
  else:
     return "system-core"

DEPENDS += "${@get_depends(bb, d)}"
DEPENDS += "fastcv-noship"
DEPENDS += "jpeg"
DEPENDS += "adsprpc liblog mm-camera"

export TARGET_LIBRARY_SUPPRESS_LIST="libadsprpc"

EXTRA_OEMAKE += " PATH_FOR_LLVM=${STAGING_BINDIR_NATIVE}/llvm-arm-toolchain/bin"
EXTRA_OEMAKE += " SYSROOT=${STAGING_DIR_TARGET}"
EXTRA_OEMAKE += " SYSROOT_32=${STAGING_DIR_TARGET}"
EXTRA_OEMAKE += " TARGET_TRIPE_64=${TARGET_SYS}"
EXTRA_OEMAKE += " TARGET_TRIPE_32=${TARGET_SYS}"
EXTRA_OEMAKE += " DEF_SCVE_PATH=${S}"
EXTRA_OEMAKE += " DEF_FCV_PATH=${WORKSPACE}/cv/fastcv-noship"
EXTRA_OEMAKE += " -j 8 -B"
EXTRA_OEMAKE += " SCVE_TARGET_OS=LE"
EXTRA_OEMAKE += "${@base_contains('DISTRO_FEATURES','face-recognition','SCVE_MAKE_FACERECOGNITION_FOR_LE=true','SCVE_MAKE_FACERECOGNITION_FOR_LE=false', d)}"

CFLAGS += " -I${STAGING_INCDIR}"
CFLAGS += " -I${STAGING_INCDIR}/cutils"
CFLAGS += " -I${STAGING_INCDIR}/glib-2.0"
CFLAGS += " -I${STAGING_LIBDIR}/glib-2.0/include"
CFLAGS += "-I${STAGING_INCDIR}/c++/4.9.3/"
CFLAGS += "-I${STAGING_INCDIR}/c++/4.9.3/${TARGET_SYS}"
CFLAGS += "-I${WORKSPACE}/camera/services/mm-camera/mm-camera2/media-controller/modules/imglib/components/lib/faceproc"

#last 2 lines included
CFLAGS += " -include unistd.h"
CFLAGS += " -include sys/time.h"
CFLAGS += " -Wno-error"
CXXFLAGS += " -std=c++11 -std=gnu++0x -std=c++0x -std=gnu++11"
CFLAGS += "-include stdint.h"
CFLAGS += "-Dstrlcpy=g_strlcpy"
CFLAGS += "-DLINUX"
CFLAGS += "-Dstrlcat=g_strlcat"
CFLAGS += "-include stdlib.h"
CFLAGS += "-include glib.h"
CFLAGS += "-include glibconfig.h"
CFLAGS += "-include properties.h"
CFLAGS += "-include ctype.h"
CFLAGS += "-include setjmp.h"

LDFLAGS += " -L${STAGING_BASELIBDIR} -L${STAGING_LIBDIR} -L${STAGING_DIR_TARGET}"
LDFLAGS += " -lcutils"
LDFLAGS += " -lglib-2.0"
LDFLAGS += " -llog"
LDFLAGS += " -lmmcamera_faceproc"
LDFLAGS += " -ladsprpc"

do_compile() {
    androidmk_setenv
    export TARGET_OUT_VENDOR=${D}/usr
    oe_runmake -f ${LA_COMPAT_DIR}/build/core/main.mk BUILD_MODULES_IN_PATHS=${S} \
        all_modules SHOW_COMMANDS=true || die "make failed"
}

do_install() {
    androidmk_setenv
    export TARGET_OUT_VENDOR=${D}/usr
    export TARGET_OUT_VENDOR_ETC=${D}/usr/etc
    export TARGET_OUT=${D}
    export TARGET_OUT_DATA=${D}/data
    oe_runmake -f ${LA_COMPAT_DIR}/build/core/main.mk BUILD_MODULES_IN_PATHS=${S} \
        all_modules SHOW_COMMANDS=true USER_INSTALL=true || die "make failed"
}

PACKAGES = "${PN}"
INSANE_SKIP_${PN} = "arch"
FILES_${PN} += "/lib/* /lib64/* /data/* /usr/etc/*"

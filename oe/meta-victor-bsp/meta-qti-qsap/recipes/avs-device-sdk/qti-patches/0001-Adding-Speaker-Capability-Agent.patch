From c749791b5e8087c0b6201ee936119c4620fef176 Mon Sep 17 00:00:00 2001
From: Prashanth Vadde <pvadde@codeaurora.org>
Date: Thu, 31 Aug 2017 12:43:09 +0530
Subject: [PATCH 1/1] Adding Speaker Capability Agent

Change-Id: I4e27c4e156dc7245d1baef21054c9468a75b1e63
---
 .../include/DefaultClient/DefaultClient.h          |   9 +
 .../DefaultClient/src/CMakeLists.txt               |   1 +
 .../DefaultClient/src/DefaultClient.cpp            |  14 +
 CapabilityAgents/CMakeLists.txt             |   1 +
 CapabilityAgents/Speaker/CMakeLists.txt     |   6 +
 .../Speaker/include/Speaker/Speaker.h              | 134 +++++++
 .../include/Speaker/SpeakerObserverInterface.h     |  28 ++
 CapabilityAgents/Speaker/src/CMakeLists.txt |  18 +
 CapabilityAgents/Speaker/src/Speaker.cpp    | 412 +++++++++++++++++++++
 9 files changed, 623 insertions(+)
 create mode 100755 CapabilityAgents/Speaker/CMakeLists.txt
 create mode 100755 CapabilityAgents/Speaker/include/Speaker/Speaker.h
 create mode 100755 CapabilityAgents/Speaker/include/Speaker/SpeakerObserverInterface.h
 create mode 100755 CapabilityAgents/Speaker/src/CMakeLists.txt
 create mode 100755 CapabilityAgents/Speaker/src/Speaker.cpp

diff --git a/ApplicationUtilities/DefaultClient/include/DefaultClient/DefaultClient.h b/ApplicationUtilities/DefaultClient/include/DefaultClient/DefaultClient.h
index b9840ac..51792e3 100644
--- a/ApplicationUtilities/DefaultClient/include/DefaultClient/DefaultClient.h
+++ b/ApplicationUtilities/DefaultClient/include/DefaultClient/DefaultClient.h
@@ -34,6 +34,10 @@
 #include <AVSCommon/Utils/MediaPlayer/MediaPlayerInterface.h>
 #include <System/StateSynchronizer.h>

+//QTI Adding SPEAKER Capability Agents
+#include <Speaker/Speaker.h>
+//QTI Adding SPEAKER Capability Agents
+
 namespace alexaClientSDK {
 namespace defaultClient {

@@ -227,6 +231,11 @@ private:
     /// The alerts capability agent.
     std::shared_ptr<capabilityAgents::alerts::AlertsCapabilityAgent> m_alertsCapabilityAgent;

+    //QTI Adding AUDIPLAYER and SPEAKER Capability Agents
+    ///Speaker Capability Agent
+    std::shared_ptr<capabilityAgents::speaker::Speaker> m_speaker;
+    //QTI Adding AUDIPLAYER and SPEAKER Capability Agents
+
     /// The Alexa dialog UX aggregator.
     std::shared_ptr<avsCommon::avs::DialogUXStateAggregator> m_dialogUXStateAggregator;

diff --git a/ApplicationUtilities/DefaultClient/src/CMakeLists.txt b/ApplicationUtilities/DefaultClient/src/CMakeLists.txt
index 0a06c76..1f2482f 100644
--- a/ApplicationUtilities/DefaultClient/src/CMakeLists.txt
+++ b/ApplicationUtilities/DefaultClient/src/CMakeLists.txt
@@ -13,6 +13,7 @@ target_link_libraries(DefaultClient
     AIP
     Alerts
     SpeechSynthesizer
+    Speaker
     AudioPlayer
     AVSSystem
     ContextManager)
diff --git a/ApplicationUtilities/DefaultClient/src/DefaultClient.cpp b/ApplicationUtilities/DefaultClient/src/DefaultClient.cpp
index 0bcb518..9316438 100644
--- a/ApplicationUtilities/DefaultClient/src/DefaultClient.cpp
+++ b/ApplicationUtilities/DefaultClient/src/DefaultClient.cpp
@@ -281,6 +281,13 @@ bool DefaultClient::initialize(

     m_connectionManager->addConnectionStatusObserver(m_alertsCapabilityAgent);

+    //QTI Adding SPEAKER Capability Agents
+    // Set up Speaker
+    m_speaker = capabilityAgents::speaker::Speaker::create(m_directiveSequencer, m_connectionManager, contextManager, m_focusManager,
+            speakMediaPlayer, exceptionSender);
+    //QTI Adding SPEAKER Capability Agents
+
+
     /*
      * Creating the Endpoint Handler - This component is responsible for handling directives from AVS instructing the
      * client to change the endpoint to connect to.
@@ -322,6 +329,13 @@ bool DefaultClient::initialize(
         return false;
     }

+	//QTI Adding SPEAKER Capability Agents
+    if (!m_directiveSequencer->addDirectiveHandler(m_speaker)) {
+        ACSDK_ERROR(LX("initializeFailed") .d("reason", "unableToRegisterDirectiveHandler") .d("directiveHandler", "SpeakerCapabilityAgent"));
+        return false;
+    }
+    //QTI Adding SPEAKER Capability Agents
+
     if (!m_directiveSequencer->addDirectiveHandler(endpointHandler)) {
         ACSDK_ERROR(LX("initializeFailed")
                 .d("reason", "unableToRegisterDirectiveHandler")
diff --git a/CapabilityAgents/CMakeLists.txt b/CapabilityAgents/CMakeLists.txt
index 9d1a59d..733e5f2 100644
--- a/CapabilityAgents/CMakeLists.txt
+++ b/CapabilityAgents/CMakeLists.txt
@@ -8,3 +8,4 @@ add_subdirectory("Alerts")
 add_subdirectory("AudioPlayer")
 add_subdirectory("SpeechSynthesizer")
 add_subdirectory("System")
+add_subdirectory("Speaker")
\ No newline at end of file
diff --git a/CapabilityAgents/Speaker/CMakeLists.txt b/CapabilityAgents/Speaker/CMakeLists.txt
new file mode 100755
index 0000000..a688c17
--- /dev/null
+++ b/CapabilityAgents/Speaker/CMakeLists.txt
@@ -0,0 +1,6 @@
+cmake_minimum_required(VERSION 3.0)
+project(Speaker LANGUAGES CXX)
+
+include(../../build/BuildDefaults.cmake)
+
+add_subdirectory("src")
diff --git a/CapabilityAgents/Speaker/include/Speaker/Speaker.h b/CapabilityAgents/Speaker/include/Speaker/Speaker.h
new file mode 100755
index 0000000..9c0bcc8
--- /dev/null
+++ b/CapabilityAgents/Speaker/include/Speaker/Speaker.h
@@ -0,0 +1,132 @@
+#ifndef AVSSDK_CAPABILITYAGENTS_SPEAKER_INCLUDE_SPEAKER_SPEAKER_H_
+#define AVSSDK_CAPABILITYAGENTS_SPEAKER_INCLUDE_SPEAKER_SPEAKER_H_
+
+#include <memory>
+#include <unordered_set>
+#include <iostream>
+#include <sstream>
+#include <algorithm>
+
+#include <AVSCommon/SDKInterfaces/ExceptionEncounteredSenderInterface.h>
+#include <AVSCommon/AVS/CapabilityAgent.h>
+#include <AVSCommon/SDKInterfaces/DirectiveSequencerInterface.h>
+#include <AVSCommon/SDKInterfaces/ChannelObserverInterface.h>
+#include <AVSCommon/SDKInterfaces/FocusManagerInterface.h>
+#include <AVSCommon/Utils/Timing/Timer.h>
+#include <AVSCommon/SDKInterfaces/MessageSenderInterface.h>
+#include <AVSCommon/SDKInterfaces/ContextManagerInterface.h>
+#include <AVSCommon/AVS/DirectiveHandlerConfiguration.h>
+#include <AVSCommon/AVS/Attachment/InProcessAttachmentReader.h>
+#include <AVSCommon/Utils/MediaPlayer/MediaPlayerInterface.h>
+#include <AVSCommon/Utils/MediaPlayer/MediaPlayerObserverInterface.h>
+#include <AVSCommon/Utils/JSON/JSONUtils.h>
+#include <AVSCommon/Utils/Threading/Executor.h>
+
+#include <Speaker/SpeakerObserverInterface.h>
+
+namespace alexaClientSDK {
+namespace capabilityAgents {
+namespace speaker {
+
+///// Forward-declare @c aip::ObserverInterface class.
+//class ObserverInterface;
+
+class Speaker: public avsCommon::avs::CapabilityAgent, public std::enable_shared_from_this<Speaker> {
+public:
+
+    static std::shared_ptr<Speaker> create(
+            std::shared_ptr<avsCommon::sdkInterfaces::DirectiveSequencerInterface> directiveSequencer,
+            std::shared_ptr<avsCommon::sdkInterfaces::MessageSenderInterface> messageSender,
+            std::shared_ptr<avsCommon::sdkInterfaces::ContextManagerInterface> contextManager,
+            std::shared_ptr<avsCommon::sdkInterfaces::FocusManagerInterface> focusManager,
+            std::shared_ptr<avsCommon::utils::mediaPlayer::MediaPlayerInterface> mediaPlayer,
+            std::shared_ptr<avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender);
+
+    ~Speaker() override;
+
+    void onContextAvailable(const std::string& jsonContext) override;
+    void onContextFailure(const avsCommon::sdkInterfaces::ContextRequestError error) override;
+    void provideState(unsigned int stateRequestToken) override;
+    void onDeregistered() override;
+    void handleDirectiveImmediately(std::shared_ptr<avsCommon::avs::AVSDirective> directive) override;
+    void preHandleDirective(std::shared_ptr<DirectiveInfo> info) override;
+    void handleDirective(std::shared_ptr<DirectiveInfo> info) override;
+    void cancelDirective(std::shared_ptr<DirectiveInfo> info) override;
+    void onFocusChanged(avsCommon::avs::FocusState newFocus) override;
+    avsCommon::avs::DirectiveHandlerConfiguration getConfiguration() const override;
+
+    void addObserver(std::shared_ptr<SpeakerObserverInterface> observer);
+    void volumeChanged(const std::string audioTokenId);
+    void muteChanged(const std::string audioTokenId);
+
+private:
+    Speaker(
+            std::shared_ptr<avsCommon::sdkInterfaces::DirectiveSequencerInterface> directiveSequencer,
+            std::shared_ptr<avsCommon::sdkInterfaces::MessageSenderInterface> messageSender,
+            std::shared_ptr<avsCommon::sdkInterfaces::ContextManagerInterface> contextManager,
+            std::shared_ptr<avsCommon::sdkInterfaces::FocusManagerInterface> focusManager,
+            std::shared_ptr<avsCommon::utils::mediaPlayer::MediaPlayerInterface> mediaPlayer,
+            std::shared_ptr<avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender);
+
+    void init();
+
+    void executeHandle(std::shared_ptr<DirectiveInfo> info);
+
+    void executeVolumeChanged(const std::string audioTokenId);
+    void executeMuteChanged(const std::string audioTokenId);
+
+    bool executeVolumeChangedEvent();
+    bool executeMuteChangedEvent();
+
+    void handleSetVolume(std::shared_ptr<DirectiveInfo> info);
+    void handleAdjustVolume(std::shared_ptr<DirectiveInfo> info);
+    void handleSetMute(std::shared_ptr<DirectiveInfo> info);
+
+    void executeSetVolume(std::shared_ptr<DirectiveInfo> info);
+    void executeAdjustVolume(std::shared_ptr<DirectiveInfo> info);
+    void executeSetMute(std::shared_ptr<DirectiveInfo> info);
+
+    void executeResetState();
+    void removeDirective(std::shared_ptr<DirectiveInfo> info);
+
+    /// The Directive Sequencer to register with for receiving directives.
+    std::shared_ptr<avsCommon::sdkInterfaces::DirectiveSequencerInterface> m_directiveSequencer;
+
+    /// The object to use for sending events.
+    std::shared_ptr<avsCommon::sdkInterfaces::MessageSenderInterface> m_messageSender;
+
+    /// The @c ContextManager used to generate system context for events.
+    std::shared_ptr<avsCommon::sdkInterfaces::ContextManagerInterface> m_contextManager;
+
+    /// The @c FocusManager used to manage usage of the dialog channel.
+    std::shared_ptr<avsCommon::sdkInterfaces::FocusManagerInterface> m_focusManager;
+
+    /// MediaPlayerInterface instance to send audio attachments to
+    std::shared_ptr<avsCommon::utils::mediaPlayer::MediaPlayerInterface> m_mediaPlayer;
+
+    /// An object to use for sending AVS Exception messages.
+    std::shared_ptr<avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> m_exceptionSender;
+
+    /// The current focus acquired by the @c Speaker
+    avsCommon::avs::FocusState m_currentFocus;
+
+    std::unordered_set<std::shared_ptr<SpeakerObserverInterface>> m_observers;
+
+    avsCommon::avs::FocusState m_focusState;
+
+    avsCommon::utils::threading::Executor m_executor;
+
+    int m_currentVolume;
+
+    bool m_isMute;
+
+    std::string m_volumeChangedPayload;
+    std::string m_muteChangedPayload;
+
+};
+
+} //speaker
+} //capabilityAgents
+} /* namespace alexaClientSDK */
+
+#endif /* AVSSDK_CAPABILITYAGENTS_SPEAKER_INCLUDE_SPEAKER_SPEAKER_H_ */
diff --git a/CapabilityAgents/Speaker/include/Speaker/SpeakerObserverInterface.h b/CapabilityAgents/Speaker/include/Speaker/SpeakerObserverInterface.h
new file mode 100755
index 0000000..957243c
--- /dev/null
+++ b/CapabilityAgents/Speaker/include/Speaker/SpeakerObserverInterface.h
@@ -0,0 +1,28 @@
+/*
+ * SpeakerObserver.h
+ *
+ *  Created on: Jun 22, 2017
+ *      Author: Juliano Barbosa Ribeiro <julianor@qti.qualcomm.com>
+ */
+
+#ifndef AVSSDK_CAPABILITYAGENTS_SPEAKER_INCLUDE_SPEAKER_SPEAKEROBSERVERINTERFACE_H_
+#define AVSSDK_CAPABILITYAGENTS_SPEAKER_INCLUDE_SPEAKER_SPEAKEROBSERVERINTERFACE_H_
+
+namespace alexaClientSDK {
+namespace capabilityAgents {
+namespace speaker {
+
+class SpeakerObserverInterface {
+public:
+    virtual ~SpeakerObserverInterface() = default;
+
+    virtual void onVolumeChanged(int vol) = 0;
+
+    virtual void onMuteChanged(bool mute) = 0;
+};
+
+} //speaker
+} //capabilityAgents
+} /* namespace alexaClientSDK */
+
+#endif /* AVSSDK_CAPABILITYAGENTS_SPEAKER_INCLUDE_SPEAKER_SPEAKEROBSERVERINTERFACE_H_ */
diff --git a/CapabilityAgents/Speaker/src/CMakeLists.txt b/CapabilityAgents/Speaker/src/CMakeLists.txt
new file mode 100755
index 0000000..55677fc
--- /dev/null
+++ b/CapabilityAgents/Speaker/src/CMakeLists.txt
@@ -0,0 +1,16 @@
+add_library(Speaker SHARED
+        Speaker.cpp)
+
+target_include_directories(Speaker PUBLIC
+        "${AVSCommon_SOURCE_DIR}/AVS"
+        "${AVSCommon_INCLUDE_DIRS}"
+        "${ContextManager_INCLUDE_DIRS}"
+        "${ACL_SOURCE_DIR}/include"
+        "${Speaker_SOURCE_DIR}/include")
+
+target_link_libraries(Speaker
+        AVSCommon
+        ACL)
+
+# install target
+asdk_install()
diff --git a/CapabilityAgents/Speaker/src/Speaker.cpp b/CapabilityAgents/Speaker/src/Speaker.cpp
new file mode 100755
index 0000000..6a0e109
--- /dev/null
+++ b/CapabilityAgents/Speaker/src/Speaker.cpp
@@ -0,0 +1,406 @@
+/*
+ * Speaker.cpp
+ *
+ *  Created on: Jun 20, 2017
+ *      Author: Juliano Barbosa Ribeiro <julianor@qti.qualcomm.com>
+ */
+
+#include <Speaker/Speaker.h>
+
+namespace alexaClientSDK {
+namespace capabilityAgents {
+namespace speaker {
+
+using namespace avsCommon;
+using namespace avsCommon::avs;
+using namespace avsCommon::avs::attachment;
+using namespace avsCommon::sdkInterfaces;
+using namespace avsCommon::utils::mediaPlayer;
+
+static const std::string NAME_VOLUME_STATE = "VolumeState";
+static const std::string NAMESPACE = "Speaker";
+static const NamespaceAndName VOLUME_STATE_PAIR = { NAMESPACE, NAME_VOLUME_STATE };
+
+static const std::string ACTIVITY_ID = "Speaker.AlexaSpeaker";
+static const std::string CHANNEL_NAME = "Dialog";
+
+//Events
+static const std::string EVENT_MUTECHANGED = "MuteChanged";
+static const std::string EVENT_VOLUMECHANGED = "VolumeChanged";
+
+/// The @c directives signature.
+static const avsCommon::avs::NamespaceAndName SETVOLUME { NAMESPACE, "SetVolume" };
+static const avsCommon::avs::NamespaceAndName ADJUSTVOLUME { NAMESPACE, "AdjustVolume" };
+static const avsCommon::avs::NamespaceAndName SETMUTE { NAMESPACE, "SetMute" };
+
+std::shared_ptr<Speaker> Speaker::create(
+        std::shared_ptr<avsCommon::sdkInterfaces::DirectiveSequencerInterface> directiveSequencer,
+        std::shared_ptr<avsCommon::sdkInterfaces::MessageSenderInterface> messageSender,
+        std::shared_ptr<avsCommon::sdkInterfaces::ContextManagerInterface> contextManager,
+        std::shared_ptr<avsCommon::sdkInterfaces::FocusManagerInterface> focusManager,
+        std::shared_ptr<avsCommon::utils::mediaPlayer::MediaPlayerInterface> mediaPlayer,
+        std::shared_ptr<avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender) {
+
+    auto speaker = std::shared_ptr < Speaker
+            > (new Speaker(directiveSequencer, messageSender, contextManager, focusManager, mediaPlayer, exceptionSender));
+    if (speaker) {
+        speaker->init();
+        return speaker;
+    }
+    else {
+        return nullptr;
+    }
+
+}
+
+void Speaker::init() {
+    m_contextManager->setStateProvider(VOLUME_STATE_PAIR, shared_from_this());
+    m_currentVolume = 30;
+    m_isMute = false;
+
+}
+
+avsCommon::avs::DirectiveHandlerConfiguration Speaker::getConfiguration() const {
+
+    printf("Speaker::getConfiguration()\n");
+    avsCommon::avs::DirectiveHandlerConfiguration configuration;
+    configuration[SETVOLUME] = avsCommon::avs::BlockingPolicy::NON_BLOCKING;
+    configuration[ADJUSTVOLUME] = avsCommon::avs::BlockingPolicy::NON_BLOCKING;
+    configuration[SETMUTE] = avsCommon::avs::BlockingPolicy::NON_BLOCKING;
+    return configuration;
+}
+
+void Speaker::addObserver(std::shared_ptr<SpeakerObserverInterface> observer) {
+    m_executor.submit([this, observer] () {m_observers.insert(observer);});
+}
+
+void Speaker::onContextAvailable(const std::string& jsonContext) {
+    printf("Speaker::onContextAvailable()\n");
+    if (!m_focusManager->acquireChannel(CHANNEL_NAME, shared_from_this(), ACTIVITY_ID)) {
+        printf("onContextAvailable failed: Unable to acquire channel.\n");
+        executeResetState();
+    }
+}
+
+void Speaker::onContextFailure(const avsCommon::sdkInterfaces::ContextRequestError error) {
+    printf("Speaker::onContextFailure()\n");
+    // default no-op
+}
+
+void Speaker::provideState(const unsigned int stateRequestToken) {
+    std::ostringstream context;
+    context << R"({)"
+            R"("volume":)" << m_currentVolume << R"(,)" << R"("muted":)" << m_isMute << R"(})";
+
+    m_contextManager->setState(VOLUME_STATE_PAIR, context.str(), StateRefreshPolicy::ALWAYS, stateRequestToken);
+}
+
+void Speaker::onDeregistered() {
+    printf("Speaker::onDeregistered()\n");
+    // default no-op
+}
+
+void Speaker::handleDirectiveImmediately(std::shared_ptr<avsCommon::avs::AVSDirective> directive) {
+    printf("Speaker::handleDirectiveImmediately()\n");
+    handleDirective(std::make_shared < DirectiveInfo > (directive, nullptr));
+}
+
+void Speaker::preHandleDirective(std::shared_ptr<DirectiveInfo> info) {
+    printf("Speaker::preHandleDirective()\n");
+    //m_executor.submit([this, info] () {executePreHandle(info);});
+}
+
+void Speaker::handleDirective(std::shared_ptr<DirectiveInfo> info) {
+    executeHandle(info);
+}
+
+void Speaker::cancelDirective(std::shared_ptr<DirectiveInfo> info) {
+    printf("Speaker::cancelDirective()\n");
+    removeDirective(info);
+}
+
+void Speaker::executeHandle(std::shared_ptr<DirectiveInfo> info) {
+    printf("Speaker::executeHandle()\n");
+    if (info->directive->getName() == SETVOLUME.name) {
+        handleSetVolume(info);
+    }
+    else if (info->directive->getName() == ADJUSTVOLUME.name) {
+        handleAdjustVolume(info);
+    }
+    else if (info->directive->getName() == SETMUTE.name) {
+        handleSetMute(info);
+    }
+    else {
+        std::string errorMessage = "unexpected directive " + info->directive->getNamespace() + ":" + info->directive->getName();
+        m_exceptionEncounteredSender->sendExceptionEncountered(info->directive->getUnparsedDirective(),
+                ExceptionErrorType::UNEXPECTED_INFORMATION_RECEIVED, errorMessage);
+        if (info->result) {
+            info->result->setFailed(errorMessage);
+        }
+        printf("handleDirective failed: *****\n");
+    }
+
+    if (info) {
+        if (info->result) {
+            info->result->setCompleted();
+        }
+        removeDirective(info);
+    }
+
+}
+
+void Speaker::onFocusChanged(avsCommon::avs::FocusState newFocus) {
+    std::cout << "Speaker::onFocusChanged" << std::endl;
+    if (newFocus != avsCommon::avs::FocusState::FOREGROUND) {
+        printf("executeOnFocusChanged: Lost focus.\n");
+        executeResetState();
+        return;
+    }
+
+    m_focusState = newFocus;
+
+//       if (m_state == State::FINISHED) {
+//           m_audioPlayer->play(SpeechSynthesizerHelper::URL, m_speechToken);
+//       }
+}
+
+void Speaker::volumeChanged(const std::string audioTokenId) {
+    printf("Speaker::volumeChanged()\n");
+
+}
+
+void Speaker::muteChanged(const std::string audioTokenId) {
+    printf("Speaker::muteChanged()\n");
+
+}
+
+Speaker::Speaker(
+        std::shared_ptr<avsCommon::sdkInterfaces::DirectiveSequencerInterface> directiveSequencer,
+        std::shared_ptr<avsCommon::sdkInterfaces::MessageSenderInterface> messageSender,
+        std::shared_ptr<avsCommon::sdkInterfaces::ContextManagerInterface> contextManager,
+        std::shared_ptr<avsCommon::sdkInterfaces::FocusManagerInterface> focusManager,
+        std::shared_ptr<avsCommon::utils::mediaPlayer::MediaPlayerInterface> mediaPlayer,
+        std::shared_ptr<avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender)
+        :
+                CapabilityAgent { NAMESPACE, exceptionSender },
+                m_directiveSequencer { directiveSequencer },
+                m_messageSender { messageSender },
+                m_contextManager { contextManager },
+                m_focusManager { focusManager },
+                m_mediaPlayer { mediaPlayer },
+                m_exceptionSender { exceptionSender },
+                m_currentFocus { FocusState::NONE },
+                m_currentVolume { 3.0 },
+                m_isMute { false } {
+    printf("Speaker::Speaker()\n");
+
+}
+
+Speaker::~Speaker() {
+    printf("Speaker::~Speaker()\n");
+}
+
+void Speaker::executeVolumeChanged(const std::string audioTokenId) {
+    printf("Speaker::executeVolumeChanged()\n");
+
+}
+
+void Speaker::executeMuteChanged(const std::string audioTokenId) {
+    printf("Speaker::executeMuteChanged()\n");
+
+}
+
+bool Speaker::executeVolumeChangedEvent() {
+    printf("Speaker::executeVolumeChangedEvent()\n");
+
+    std::ostringstream payload;
+    payload << R"({)"
+            R"("volume":)" << m_currentVolume << R"(,)" << R"("muted":)" << m_isMute << R"(})";
+
+    m_volumeChangedPayload = payload.str();
+
+    std::cout << "Speaker::executeVolumeChangedEvent() - Payload = " << m_volumeChangedPayload << std::endl;
+
+    auto json = buildJsonEventString(EVENT_VOLUMECHANGED, "", m_volumeChangedPayload);
+    auto request = std::make_shared < avsCommon::avs::MessageRequest > (json.second);
+    m_messageSender->sendMessage(request);
+
+    return true;
+
+}
+
+bool Speaker::executeMuteChangedEvent() {
+    printf("Speaker::executeMuteChangedEvent()\n");
+
+    std::ostringstream payload;
+    payload << R"({"mute" : ")" << m_isMute << R"("})";
+    m_muteChangedPayload = payload.str();
+
+    std::cout << "Speaker::executeMuteChangedEvent() - Payload = " << m_muteChangedPayload << std::endl;
+
+    auto json = buildJsonEventString(EVENT_MUTECHANGED, "", m_muteChangedPayload);
+    auto request = std::make_shared < MessageRequest > (json.second);
+    m_messageSender->sendMessage(request);
+
+    return true;
+
+}
+
+void Speaker::handleSetVolume(std::shared_ptr<DirectiveInfo> info) {
+    printf("Speaker::handleSetVolume()\n");
+    m_executor.submit([this, info] () {
+        executeSetVolume(info);
+    });
+}
+
+void Speaker::handleAdjustVolume(std::shared_ptr<DirectiveInfo> info) {
+    printf("Speaker::handleAdjustVolume()\n");
+    m_executor.submit([this, info] () {
+        executeAdjustVolume(info);
+    });
+
+}
+
+void Speaker::handleSetMute(std::shared_ptr<DirectiveInfo> info) {
+    printf("Speaker::HandleSetMute()\n");
+    m_executor.submit([this, info] () {
+        executeSetMute(info);
+    });
+
+}
+
+void Speaker::executeSetVolume(std::shared_ptr<DirectiveInfo> info) {
+    printf("Speaker::executeSetVolume()");
+
+    //reading absolute volume value
+    int64_t payloadVolume = -1;
+    avsCommon::utils::json::jsonUtils::lookupInt64Value(info->directive->getPayload(), "volume", &payloadVolume);
+    if (payloadVolume == -1) {
+        printf("Speaker::executeSetVolume() - PayloadVolume is empty. Setting default value to 30\n");
+        m_currentVolume = 30;
+    }
+    else {
+        m_currentVolume = payloadVolume;
+    }
+
+    std::cout << "Speaker::executeSetVolume() - Volume set to = " << m_currentVolume << std::endl;
+
+    double volForMediaPlayer = static_cast<double>(m_currentVolume) / 10;
+    m_mediaPlayer->setVolume(volForMediaPlayer);
+
+    //notify Observer
+    m_executor.submit([this] () {
+        for (auto observer : m_observers) {
+            observer->onVolumeChanged(m_currentVolume);
+        }
+    });
+
+    //notify AVS cloud
+    executeVolumeChangedEvent();
+
+}
+
+void Speaker::executeAdjustVolume(std::shared_ptr<DirectiveInfo> info) {
+    printf("Speaker::executeAdjustVolume()\n");
+
+    //reading absolute volume value
+    int64_t payloadVolume = -1;
+    avsCommon::utils::json::jsonUtils::lookupInt64Value(info->directive->getPayload(), "volume", &payloadVolume);
+    if (payloadVolume == -1) {
+        printf("Speaker::executeAdjustVolume() - PayloadVolume is empty. Setting default value to 30\n");
+        m_currentVolume = 30;
+    }
+    else {
+        m_currentVolume = m_currentVolume + payloadVolume;
+
+        //Checking for MAX
+        if (m_currentVolume > 100)
+            m_currentVolume = 100;
+
+        //Checking for MIN volume
+        if (m_currentVolume < 10)
+            m_currentVolume = 10;
+
+    }
+
+    std::cout << "Speaker::executeAdjustVolume() - Volume set to = " << m_currentVolume << std::endl;
+
+    double volForMediaPlayer = static_cast<double>(m_currentVolume) / 10;
+    m_mediaPlayer->setVolume(volForMediaPlayer);
+
+    //notify Observer
+    m_executor.submit([this] () {
+        for (auto observer : m_observers) {
+            observer->onVolumeChanged(m_currentVolume);
+        }
+    });
+
+    //notify AVS cloud
+    executeVolumeChangedEvent();
+
+}
+
+void Speaker::executeSetMute(std::shared_ptr<DirectiveInfo> info) {
+    printf("Speaker::executeSetMute()\n");
+
+    //reading mute value
+
+    //QTI TODO: REMOVE when JSON implements getBoolean from PAYLOAD
+    //avsCommon::jsonUtils::lookupStringValue(info->directive->getPayload(), "mute", &payloadMute);
+    std::string payloadMute = info->directive->getPayload();
+
+    if (payloadMute.empty()) {
+        printf("Speaker::executeSetMute() - MUTE is set to FALSE\n");
+        m_isMute = false;
+    }
+    else {
+        //QTI TODO: REMOVE when JSON implements getBoolean from PAYLOAD
+        auto stringIndex = payloadMute.find(":");
+        if (stringIndex != std::string::npos && stringIndex != payloadMute.size() - 1) {
+            auto content = payloadMute.substr(payloadMute.find(':') + 1);
+            //std::cout << "Speaker::executeSetMute() - content = " << content << std::endl;
+
+            std::transform(content.begin(), content.end(), content.begin(), ::tolower);
+            std::istringstream is(content);
+            bool mute;
+            is >> std::boolalpha >> mute;
+            m_isMute = mute;
+        }
+    }
+
+    std::cout << "Speaker::executeSetMute() - Mute = " << m_isMute << std::endl;
+    m_mediaPlayer->setMute(m_isMute);
+
+    //notify Observer
+    m_executor.submit([this] () {
+        for (auto observer : m_observers) {
+            observer->onMuteChanged(m_isMute);
+        }
+    });
+
+    //notify AVS cloud
+    executeMuteChangedEvent();
+
+}
+
+void Speaker::executeResetState() {
+    printf("Speaker::executeResetState()\n");
+    if (m_focusState != FocusState::NONE) {
+        m_focusManager->releaseChannel(CHANNEL_NAME, shared_from_this());
+    }
+    m_focusState = FocusState::NONE;
+//    setState(State::FINISHED);
+}
+
+void Speaker::removeDirective(std::shared_ptr<DirectiveInfo> info) {
+    printf("Speaker::removeDirective()\n");
+// Check result too, to catch cases where DirectiveInfo was created locally, without a nullptr result.
+// In those cases there is no messageId to remove because no result was expected.
+    if (info->directive && info->result) {
+        CapabilityAgent::removeDirective(info->directive->getMessageId());
+    }
+}
+
+} //speaker
+} //capabilityAgents
+} /* namespace alexaClientSDK */
--
1.9.1


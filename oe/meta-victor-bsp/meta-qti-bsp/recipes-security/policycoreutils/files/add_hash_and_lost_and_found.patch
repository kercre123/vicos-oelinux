Only in b: add_hash_and_lost_and_found.patch
diff -ur a/setfiles/Makefile b/setfiles/Makefile
--- a/setfiles/Makefile	2015-02-02 06:38:10.000000000 -0800
+++ b/setfiles/Makefile	2017-07-17 17:44:50.057557985 -0700
@@ -10,7 +10,7 @@
 
 CFLAGS ?= -g -Werror -Wall -W
 override CFLAGS += -I$(PREFIX)/include
-LDLIBS = -lselinux -lsepol -L$(LIBDIR)
+LDLIBS = -lselinux -lsepol -lssl -lcrypto -L$(LIBDIR)
 
 ifeq ($(AUDITH), /usr/include/libaudit.h)
 	override CFLAGS += -DUSE_AUDIT
diff -ur a/setfiles/restore.c b/setfiles/restore.c
--- a/setfiles/restore.c	2015-02-02 06:38:10.000000000 -0800
+++ b/setfiles/restore.c	2017-07-17 17:39:21.390229832 -0700
@@ -385,6 +385,8 @@
 			continue;
 		if (len > 0 && strcmp(&globbuf.gl_pathv[i][len], "/..") == 0)
 			continue;
+		if (len > 0 && strcmp(&globbuf.gl_pathv[i][len], "/lost+found") == 0)
+			continue;
 		int rc = process_one_realpath(globbuf.gl_pathv[i], recurse);
 		if (rc < 0)
 			errors = rc;
diff -ur a/setfiles/setfiles.c b/setfiles/setfiles.c
--- a/setfiles/setfiles.c	2017-07-17 17:36:05.245017846 -0700
+++ b/setfiles/setfiles.c	2017-07-17 17:44:31.973815042 -0700
@@ -5,6 +5,9 @@
 #include <ctype.h>
 #include <regex.h>
 #include <sys/vfs.h>
+#include <openssl/sha.h>
+#include <errno.h>
+#include <attr/xattr.h>
 #define __USE_XOPEN_EXTENDED 1	/* nftw */
 #include <libgen.h>
 #ifdef USE_AUDIT
@@ -23,6 +26,10 @@
 static int null_terminated = 0;
 static struct restore_opts r_opts;
 
+#define SELINUX_DEFAULT_FC_PATH "/etc/selinux/mls/contexts/files/file_contexts"
+#define FILE_READ_BUF_SIZE 1024
+#define RC_HASH_KEY "security.restorecon_hash"
+
 #define STAT_BLOCK_SIZE 1
 
 /* setfiles will abort its operation after reaching the
@@ -142,6 +149,63 @@
 #endif
 }
 
+// Get existing hash value from extended attributes
+int get_dir_hash(const char* path, unsigned char* hash) {
+    if (lgetxattr(path, RC_HASH_KEY, hash, SHA_DIGEST_LENGTH + 1) < 0) {
+        if (errno != ENOATTR) {
+            fprintf(stderr, "getxattr: %s: %s\n", path, strerror(errno));
+            return -1;
+        }
+        // Attribute not previously existing is an acceptable error
+    }
+    return 0;
+}
+
+// Calculate SHA1 hash of file contexts file
+int get_fc_hash(unsigned char* hash) {
+    SHA_CTX context;
+    int fd;
+    int bytes_read;
+    int ret = 0;
+    char buf[FILE_READ_BUF_SIZE];
+    char* path;
+
+    if (policyfile)
+        path = policyfile;
+    else
+        path = SELINUX_DEFAULT_FC_PATH;
+
+    SHA1_Init(&context);
+    fd = open(path, O_CLOEXEC | O_RDONLY | O_NOFOLLOW);
+    if (fd < 0) {
+        fprintf(stderr, "open: get_fc_hash: %s\n", strerror(errno));
+        ret = -1;
+        goto close_sha;
+    }
+
+    while ((bytes_read = read(fd, buf, FILE_READ_BUF_SIZE)) > 0) {
+        SHA1_Update(&context, buf, bytes_read);
+    }
+
+    if (bytes_read < 0) {
+        fprintf(stderr, "read: get_fc_hash: %s\n", strerror(errno));
+        ret = -1;
+    }
+
+    close(fd);
+close_sha:
+    SHA1_Final(hash, &context);
+    return ret;
+}
+
+int set_hash(const char* path, const unsigned char* hash) {
+    if (lsetxattr(path, RC_HASH_KEY, hash, SHA_DIGEST_LENGTH + 1, 0) < 0) {
+        fprintf(stderr, "setxattr: %s: %s\n", path, strerror(errno));
+        return -1;
+    }
+    return 0;
+}
+
 int main(int argc, char **argv)
 {
 	struct stat sb;
@@ -153,6 +217,8 @@
 	int recurse; /* Recursive descent. */
 	const char *base;
 	int mass_relabel = 0, errors = 0;
+	unsigned char dir_hash[SHA_DIGEST_LENGTH + 1] = {0};
+	unsigned char fc_hash[SHA_DIGEST_LENGTH + 1] = {0};
 	
 	memset(&r_opts, 0, sizeof(r_opts));
 
@@ -411,6 +477,9 @@
 	if (nerr)
 		exit(-1);
 
+	if (get_fc_hash(fc_hash) < 0)
+		exit(-1);
+
 	restore_init(&r_opts);
 	if (use_input_file) {
 		FILE *f = stdin;
@@ -430,13 +499,28 @@
 			buf[len - 1] = 0;
 			if (!strcmp(buf, "/"))
 				mass_relabel = 1;
+			if (recurse && !r_opts.force) {
+				if (get_dir_hash(buf, dir_hash) < 0 ||
+						!strcmp(fc_hash, dir_hash))
+					continue;
+			}
 			errors |= process_glob(buf, recurse) < 0;
+			if (recurse)
+				set_hash(buf, fc_hash); // return ignored
 		}
 		if (strcmp(input_filename, "-") != 0)
 			fclose(f);
 	} else {
-		for (i = optind; i < argc; i++)
+		for (i = optind; i < argc; i++) {
+			if (recurse && !r_opts.force) {
+				if (get_dir_hash(argv[i], dir_hash) < 0 ||
+						!strcmp(fc_hash, dir_hash))
+					continue;
+			}
 			errors |= process_glob(argv[i], recurse) < 0;
+			if (recurse)
+				set_hash(argv[i], fc_hash);  // return ignored
+		}
 	}
 	
 	maybe_audit_mass_relabel(mass_relabel, errors);

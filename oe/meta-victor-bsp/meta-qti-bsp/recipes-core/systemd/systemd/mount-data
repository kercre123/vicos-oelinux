#! /bin/sh

# Copyright (c) 2017, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials provided
#     with the distribution.
#   * Neither the name of The Linux Foundation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

UNBRICK_KEY="anki.unbrick"
WIPE_COOKIE="/run/wipe-data"
TOM_LOG="/factory/log1"
KEY_FILE="/run/userdata.key"
CONNMAN_DONE_TOKEN=/data/lib/connman/.mount-data
ROBOT_KEY=/data/etc/robot.pem
USER_DATA_PARTITION=/dev/block/bootdevice/by-name/userdata
MOUNT_OPTIONS="defaults,noexec,nosuid,nodev,noatime"

mount_data_from_mapped_userdata() {
    mount -o $MOUNT_OPTIONS --source /dev/mapper/userdata --target /data
    return $?
}

make_and_mount_cryptdata() {
  echo "Remaking /data" > /dev/kmsg
  user-data-locker reset > $KEY_FILE
  rc=$?
  if [ $rc -ne 0 ]; then
    echo "user-data-locker reset returned $rc"
    return $rc
  fi
  cryptsetup -q --key-file $KEY_FILE luksFormat $USER_DATA_PARTITION
  rc=$?
  if [ $rc -ne 0 ]; then
    echo "cryptsetup luksFormat returned $rc"
    return $rc
  fi
  cryptsetup -q --key-file $KEY_FILE luksOpen $USER_DATA_PARTITION userdata
  rc=$?
  if [ $rc -ne 0 ]; then
    echo "cryptsetup luksOpen returned $rc"
    return $rc
  fi
  mkfs.ext4 /dev/mapper/userdata
  rc=$?
  if [ $rc -ne 0 ]; then
    echo "mkfs.ext4 returned $rc"
    cryptsetup luksClose userdata
    return $rc
  fi
  mount_data_from_mapped_userdata
  rc=$?
  if [ $rc -ne 0 ]; then
    echo "mount /data returned $rc"
    cryptsetup luksClose userdata
    return $rc
  fi
}

make_userdata() {
  if [ ! -e $CONNMAN_DONE_TOKEN ]; then
    mkdir -p /data/lib/connman/
    cp -rf /var/lib/connman/* /data/lib/connman
    touch $CONNMAN_DONE_TOKEN
  fi
  if [ ! -f $ROBOT_KEY ]; then
    mkdir -p /data/etc
    openssl genrsa -out $ROBOT_KEY 2048
    chown net:anki $ROBOT_KEY
    chmod 440 $ROBOT_KEY
  fi

  #usb
  mkdir -p /data/usb
  #camera
  mkdir -p /data/misc/camera
  #data
  mkdir -p /data/data/com.anki.victor
  chown -R anki:anki /data/data/com.anki.victor
  chmod -R 770 /data/data/com.anki.victor
  #vic-gateway
  mkdir -p /data/vic-gateway
  chown -R net:anki /data/vic-gateway
  chmod -R 770 /data/vic-gateway
  #bluetooth
  mkdir -p /data/misc/bluetooth
  chown -R bluetooth:bluetooth /data/misc/bluetooth
  chmod -R 770 /data/misc/bluetooth
  #panics
  mkdir -p /data/panics
  chown -R anki:anki /data/panics
  chmod -R 770 /data/panics

  #make sure /data/run/connman exists - NOTE: we need /data/lib/connman and /data/run/connamn
  mkdir -p /data/run/connman
}

mount_tmp_userdata() {
  mount -o size=64M -t tmpfs none /data/
  rc=$?
  return $rc
}

mount_userdata() {
    # If the partition has not already been formatted for LUKS, don't bother trying
    # to mount it.
    if ! cryptsetup -v isLuks $USER_DATA_PARTITION; then
      return 1
    fi

    # Get the passphrase (key) using TrustZone
    user-data-locker > $KEY_FILE
    rc=$?
    if [ $rc -ne 0 ]; then
      echo "user-data-locker returned $rc"
      return $rc
    fi

    # Open the encrypted partition
    cryptsetup -q --key-file $KEY_FILE luksOpen $USER_DATA_PARTITION userdata
    rc=$?
    if [ $rc -ne 0 ]; then
       echo "cryptsetup luksOpen returned $rc"
       return $rc
    fi

    # Try to mount the /data partition
    mount_data_from_mapped_userdata
    rc=$?
    if [ $rc -ne 0 ]; then
      echo "mount /data returned $rc"
      cryptsetup luksClose userdata
    fi
    return $rc
}


case "$1" in
  start )
    hexdump -e '"%c"' -n 4 /dev/block/bootdevice/by-name/userdata | egrep -q WIPE && echo "1" > /tmp/data_cleared && chown engine:anki /tmp/data_cleared
    if grep $UNBRICK_KEY /proc/cmdline > /dev/null; then
      echo "Mount-data in UNBRICK MODE" > /dev/kmsg
      mount_tmp_userdata
      mounted=$?
    else
      mount_userdata
      mounted=$?
      if [ $mounted -ne 0 ]; then
        make_and_mount_cryptdata
        mounted=$?
        sync
        if [ $mounted -eq 0 ]; then
          dmesg > /data/format-data.log
          echo "-----------------------------" >> /data/format-data.log
          journalctl -u mount-data >> /data/format-data.log
        fi
      fi
      rm -rf $KEY_FILE
    fi

    # Always create userdata
    make_userdata
    ;;

  stop )
    echo "Unmounting /data"
    sync
    umount /data
    cryptsetup luksClose userdata
    if test -e $WIPE_COOKIE; then
      user-data-locker reset
      blkdiscard -s $USER_DATA_PARTITION
      blkdiscard -s /dev/block/bootdevice/by-name/switchboard
      echo WIPE > /dev/block/bootdevice/by-name/userdata
    fi
    ;;

  * )
    echo "Usage: mount-data { start | stop }"
    ;;
esac

exit 0

/*
*Copyright (c) 2017 Qualcomm Technologies, Inc.
*All Rights Reserved.
*Confidential and Proprietary - Qualcomm Technologies, Inc.
 */


#ifndef __GST_QAHWSINK_H__
#define __GST_QAHWSINK_H__

#include <gst/gst.h>
#include <gst/audio/audio.h>
#include <mm-audio/qahw_api/inc/qahw_api.h>
#include <mm-audio/qahw_api/inc/qahw_defs.h>

G_BEGIN_DECLS

#define GST_TYPE_QAHW_SINK            (gst_qahwsink_get_type())
#define GST_QAHW_SINK(obj)            (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_QAHW_SINK,GstQahwSink))
#define GST_QAHW_SINK_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_QAHW_SINK,GstQahwSinkClass))
#define GST_IS_QAHW_SINK(obj)         (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_QAHW_SINK))
#define GST_IS_QAHW_SINK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_QAHW_SINK))
#define GST_QAHW_SINK_CAST(obj)       ((GstQahwSink *) (obj))

typedef struct _GstQahwSink GstQahwSink;
typedef struct _GstQahwSinkClass GstQahwSinkClass;

#define GST_QAHW_SINK_GET_LOCK(obj)	(&GST_QAHW_SINK_CAST (obj)->qahw_lock)
#define GST_QAHW_SINK_LOCK(obj)	    (g_mutex_lock (GST_QAHW_SINK_GET_LOCK (obj)))
#define GST_QAHW_SINK_UNLOCK(obj)   (g_mutex_unlock (GST_QAHW_SINK_GET_LOCK (obj)))

#define GST_QAHW_SINK_GET_COND(obj)    (&GST_QAHW_SINK_CAST (obj)->qahw_cond)
#define GST_QAHW_SINK_WAIT(obj)	       (g_cond_wait (GST_QAHW_SINK_GET_COND (obj), GST_QAHW_SINK_GET_LOCK (obj)))
#define GST_QAHW_SINK_BROADCAST(obj)   (g_cond_broadcast (GST_QAHW_SINK_GET_COND (obj)))

typedef enum {
  GST_QAHWSRC_OUTPUT_DEVICE_EARPIECE = AUDIO_DEVICE_OUT_EARPIECE,
  GST_QAHWSRC_OUTPUT_DEVICE_SPEAKER = AUDIO_DEVICE_OUT_SPEAKER,
  GST_QAHWSRC_OUTPUT_DEVICE_WIRED_HEADSET = AUDIO_DEVICE_OUT_WIRED_HEADSET,
  GST_QAHWSRC_OUTPUT_DEVICE_WIRED_HEADPHONE = AUDIO_DEVICE_OUT_WIRED_HEADPHONE,
  GST_QAHWSRC_OUTPUT_DEVICE_BLUETOOTH_SCO = AUDIO_DEVICE_OUT_BLUETOOTH_SCO,
  GST_QAHWSRC_OUTPUT_DEVICE_BLUETOOTH_SCO_HEADSET = AUDIO_DEVICE_OUT_BLUETOOTH_SCO_HEADSET,
  GST_QAHWSRC_OUTPUT_DEVICE_BLUETOOTH_SCO_CARKIT = AUDIO_DEVICE_OUT_BLUETOOTH_SCO_CARKIT,
  GST_QAHWSRC_OUTPUT_DEVICE_BLUETOOTH_A2DP = AUDIO_DEVICE_OUT_BLUETOOTH_A2DP,
  GST_QAHWSRC_OUTPUT_DEVICE_BLUETOOTH_A2DP_HEADPHONES = AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES,
  GST_QAHWSRC_OUTPUT_DEVICE_BLUETOOTH_A2DP_SPEAKER = AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER,
  GST_QAHWSRC_OUTPUT_DEVICE_AUX_DIGITAL = AUDIO_DEVICE_OUT_AUX_DIGITAL,
  GST_QAHWSRC_OUTPUT_DEVICE_HDMI = AUDIO_DEVICE_OUT_HDMI,
  GST_QAHWSRC_OUTPUT_DEVICE_ANALOG_DOCK_HEADSET = AUDIO_DEVICE_OUT_ANLG_DOCK_HEADSET,
  GST_QAHWSRC_OUTPUT_DEVICE_DIGITAL_DOCK_HEADSET = AUDIO_DEVICE_OUT_DGTL_DOCK_HEADSET,
  GST_QAHWSRC_OUTPUT_DEVICE_USB_ACCESSORY = AUDIO_DEVICE_OUT_USB_ACCESSORY,
  GST_QAHWSRC_OUTPUT_DEVICE_USB_DEVICE = AUDIO_DEVICE_OUT_USB_DEVICE,
  GST_QAHWSRC_OUTPUT_DEVICE_REMOTE_SUBMIX = AUDIO_DEVICE_OUT_REMOTE_SUBMIX,
  GST_QAHWSRC_OUTPUT_DEVICE_TELEPHONY_TX = AUDIO_DEVICE_OUT_TELEPHONY_TX,
  GST_QAHWSRC_OUTPUT_DEVICE_LINE = AUDIO_DEVICE_OUT_LINE,
  GST_QAHWSRC_OUTPUT_DEVICE_HDMI_ARC = AUDIO_DEVICE_OUT_HDMI_ARC,
  GST_QAHWSRC_OUTPUT_DEVICE_SPDIF = AUDIO_DEVICE_OUT_SPDIF,
  GST_QAHWSRC_OUTPUT_DEVICE_FM = AUDIO_DEVICE_OUT_FM,
  GST_QAHWSRC_OUTPUT_DEVICE_AUX_LINE = AUDIO_DEVICE_OUT_AUX_LINE,
  GST_QAHWSRC_OUTPUT_DEVICE_SPEAKER_SAFE = AUDIO_DEVICE_OUT_SPEAKER_SAFE,
  GST_QAHWSRC_OUTPUT_DEVICE_IP = AUDIO_DEVICE_OUT_IP,
  GST_QAHWSRC_OUTPUT_DEVICE_PROXY = AUDIO_DEVICE_OUT_PROXY,
  GST_QAHWSRC_OUTPUT_DEVICE_DEFAULT = AUDIO_DEVICE_OUT_DEFAULT,
} GstQahwSinkOutputDevice;

typedef enum {
  GST_QAHWSRC_OUTPUT_FLAG_NONE = AUDIO_OUTPUT_FLAG_NONE,
  GST_QAHWSRC_OUTPUT_FLAG_DIRECT = AUDIO_OUTPUT_FLAG_DIRECT,
  GST_QAHWSRC_OUTPUT_FLAG_PRIMARY = AUDIO_OUTPUT_FLAG_PRIMARY,
  GST_QAHWSRC_OUTPUT_FLAG_FAST = AUDIO_OUTPUT_FLAG_FAST,
  GST_QAHWSRC_OUTPUT_FLAG_DEEP_BUFFER = AUDIO_OUTPUT_FLAG_DEEP_BUFFER,
  GST_QAHWSRC_OUTPUT_FLAG_COMPRESS_OFFLOAD = AUDIO_OUTPUT_FLAG_COMPRESS_OFFLOAD,
  GST_QAHWSRC_OUTPUT_FLAG_NON_BLOCKING = AUDIO_OUTPUT_FLAG_NON_BLOCKING,
  GST_QAHWSRC_OUTPUT_FLAG_HW_AV_SYNC = AUDIO_OUTPUT_FLAG_HW_AV_SYNC,
  GST_QAHWSRC_OUTPUT_FLAG_TTS = AUDIO_OUTPUT_FLAG_TTS,
  GST_QAHWSRC_OUTPUT_FLAG_RAW = AUDIO_OUTPUT_FLAG_RAW,
  GST_QAHWSRC_OUTPUT_FLAG_SYNC = AUDIO_OUTPUT_FLAG_SYNC,
  GST_QAHWSRC_OUTPUT_FLAG_IEC958_NONAUDIO = AUDIO_OUTPUT_FLAG_IEC958_NONAUDIO,
  GST_QAHWSRC_OUTPUT_FLAG_VOIP_RX = AUDIO_OUTPUT_FLAG_VOIP_RX,
  GST_QAHWSRC_OUTPUT_FLAG_COMPRESS_PASSTHROUGH = AUDIO_OUTPUT_FLAG_COMPRESS_PASSTHROUGH,
  GST_QAHWSRC_OUTPUT_FLAG_DIRECT_PCM = AUDIO_OUTPUT_FLAG_DIRECT_PCM,
} GstQahwSinkOutputFlags;

typedef enum {
    GST_QAHWSRC_OUTPUT_SESSION_DEFAULT,
    GST_QAHWSRC_OUTPUT_SESSION_DEEP_BUFFER,
    GST_QAHWSRC_OUTPUT_SESSION_DIRECT_PCM,
} GstQahwSinkSessionType;

#define GST_TYPE_QAHWSINK_OUTPUT_DEVICE (gst_qahwsink_output_device_get_type ())
#define GST_TYPE_QAHWSINK_OUTPUT_FLAGS (gst_qahwsink_output_flags_get_type ())
#define GST_TYPE_QAHWSINK_OUTPUT_SESSION_TYPE (gst_qahwsink_session_get_type ())


/**
 * GstQahwSink:
 *
 * Opaque data structure
 */
struct _GstQahwSink {
  GstAudioBaseSink       sink;

  gchar                 *module_id;
  qahw_module_handle_t  *module;
  qahw_stream_handle_t  *stream;

  GstQahwSinkOutputDevice output_device;
  audio_config_t         config;
  float                  left_volume;
  float                  right_volume;
  gboolean               muted;
  gchar                 *device_address;
  gchar                 *kvpair_values;
  gchar                 *btaddr;
  gint                   audio_handle;
  gboolean               kpi_mode;
  GstQahwSinkOutputFlags output_flags;
  GstQahwSinkSessionType session_type;

  GMutex qahw_lock;
  GCond  qahw_cond;

  gboolean drained;
  gboolean can_write;
  gboolean paused;
  gboolean running;
  gboolean is_aptx;
  gboolean user_module;

  GstClockTime clock_offset;
};

struct _GstQahwSinkClass {
  GstAudioBaseSinkClass parent_class;
};

GType gst_qahwsink_get_type(void);

G_END_DECLS

#endif /* __GST_QAHWSINK_H__ */
